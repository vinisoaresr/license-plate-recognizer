# -*- coding: utf-8 -*-
"""Copy of ANPR - Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Gve81HQRuzGSQwQqhBiniKoDcs5Eq-V

## 0. Install and Import Dependencies
"""

# !pip install easyocr
# !pip install imutils

import cv2
from matplotlib import pyplot as plt
import numpy as np
import imutils
import easyocr

captura = cv2.VideoCapture(0)

while(1):
    ret, frame = captura.read()
    # cv2.imshow("Video", frame)

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cv2.imshow("Video", gray)
   
    k = cv2.waitKey(30) & 0xff
    if k == 27:
        break


"""## 1. Read in Image, Grayscale and Blur"""
img = cv2.imread('./samples/image4.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

"""## 2. Apply filter and find edges for localization"""
bfilter = cv2.bilateralFilter(gray, 11, 17, 17) #Noise reduction
edged = cv2.Canny(bfilter, 30, 200) #Edge detection

plt.figure()
plt.imshow(edged)

"""## 3. Find Contours and Apply Mask"""
keypoints = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = imutils.grab_contours(keypoints)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]

reader = easyocr.Reader(['en'])
location = None
for contour in contours:
    approx = cv2.approxPolyDP(contour, 10, True)
    print(len(approx))

    location = approx

    # new image with black background from contour
    mask = np.zeros(gray.shape, np.uint8)
    new_image = cv2.drawContours(mask, [location], 0,255, -1)
    new_image = cv2.bitwise_and(img, img, mask=mask)


    # Crop new image
    (x,y) = np.where(mask==255)
    (x1, y1) = (np.min(x), np.min(y))
    (x2, y2) = (np.max(x), np.max(y))
    cropped_image = gray[x1:x2+1, y1:y2+1]

    plt.figure()
    plt.imshow(cropped_image)

    """## 4. Use Easy OCR To Read Text"""
    result = reader.readtext(cropped_image)

    if len(result) == 0:
      continue

    """## 5. Render Result"""
    text = ''
    if len(result) > 0:
        text = result[0][-2]

    if len(text) < 3:
      continue

    print(text)

    _, thresh = cv2.threshold(cropped_image, 195, 255, cv2.THRESH_BINARY)
    plt.figure()
    plt.imshow(cropped_image)

    plt.figure()
    plt.imshow(thresh)


    font = cv2.FONT_HERSHEY_SIMPLEX
    res = cv2.putText(img, text=text, org=(approx[0][0][0], approx[1][0][1]+60), fontFace=font, fontScale=1, color=(0,255,0), thickness=2, lineType=cv2.LINE_AA)
    res = cv2.rectangle(img, tuple(approx[0][0]), tuple(approx[2][0]), (0,255,0),3)

    plt.figure()
    plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))

    if len(approx) == 4:
        location = approx
        break

plt.show()






